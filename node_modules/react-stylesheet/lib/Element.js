'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _CSSType = require('./CSSType');

var CSSType = _interopRequireWildcard(_CSSType);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _compiler = require('./compiler');

var _ElementPropSpec = require('./ElementPropSpec');

var _StylesheetManager = require('./StylesheetManager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Element = (_temp = _class = function (_React$Component) {
  _inherits(Element, _React$Component);

  function Element() {
    _classCallCheck(this, Element);

    return _possibleConstructorReturn(this, (Element.__proto__ || Object.getPrototypeOf(Element)).apply(this, arguments));
  }

  _createClass(Element, [{
    key: 'render',
    value: function render() {
      var ownProps = this.transformProps(this.props);
      var Component = this.constructor.Component;
      var className = [];
      var style = ownProps.style || {};
      var dynamicStyle = {};
      var dynamicStyleKey = [];
      var props = {};

      if (this.constructor.className != null) {
        className.push(this.constructor.className);
      }

      for (var k in ownProps) {
        if (!ownProps.hasOwnProperty(k)) {
          continue;
        }
        var v = ownProps[k];

        if (k === 'Component') {
          Component = v;
          continue;
        } else if (k === 'className') {
          className.push(v);
          continue;
        } else if (k === 'style') {
          continue;
        }

        var spec = _ElementPropSpec.Spec[k];
        if (spec != null) {
          if (v == null) {
            continue;
          }
          if (spec.applyStrategy === 'dynamic-inline') {
            style[spec.name] = v;
          } else if (spec.applyStrategy === 'dynamic') {
            if (spec.state === 'normal') {
              dynamicStyle[spec.name] = v;
            } else {
              dynamicStyle[spec.state] = dynamicStyle[spec.state] || {};
              dynamicStyle[spec.state][spec.name] = v;
            }
            dynamicStyleKey[spec.index] = v;
          } else if (spec.applyStrategy === 'static') {
            className.push(_StylesheetManager.staticStylesheetManager.toClassName(spec.state, spec.name, v));
          }
        } else {
          props[k] = v;
        }
      }

      className.push(_StylesheetManager.dynamicStylesheetManager.toClassName(dynamicStyleKey, dynamicStyle));

      return _react2.default.createElement(Component, _extends({}, props, {
        style: (0, _compiler.expandStyle)(style),
        className: className.join(' ')
      }));
    }
  }, {
    key: 'transformProps',
    value: function transformProps(props) {
      return props;
    }
  }]);

  return Element;
}(_react2.default.Component), _class.defaultProps = {
  boxSizing: 'border-box'
}, _class.Component = 'div', _class.className = null, _temp);
exports.default = Element;
