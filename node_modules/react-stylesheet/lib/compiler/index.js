'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandStyle = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright 2016-present, Prometheus Research, LLC. MIT License
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * 
                                                                                                                                                                                                                                                                   */

exports.default = compile;
exports.compileStyle = compileStyle;
exports.compileName = compileName;

var _inlineStylePrefixAll = require('inline-style-prefix-all');

var _inlineStylePrefixAll2 = _interopRequireDefault(_inlineStylePrefixAll);

var _murmurhash3_gc = require('murmurhash-js/murmurhash3_gc');

var _murmurhash3_gc2 = _interopRequireDefault(_murmurhash3_gc);

var _hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');

var _memoizeStringOnly2 = _interopRequireDefault(_memoizeStringOnly);

var _PseudoClassSet = require('./PseudoClassSet');

var _PseudoClassSet2 = _interopRequireDefault(_PseudoClassSet);

var _expand = require('./expand');

var _expand2 = _interopRequireDefault(_expand);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function compile(name, stylesheet) {

  var id = (0, _murmurhash3_gc2.default)(JSON.stringify(stylesheet));
  var mapping = {};
  var css = [];

  // If base is not defined we need to define it so defaults style kicks in.
  if (stylesheet.base == null) {
    stylesheet = _extends({
      base: {}
    }, stylesheet);
  }

  for (var variant in stylesheet) {

    var style = stylesheet[variant];
    if (variant.indexOf('_') > -1) {
      variant = variant.split('_');
    } else {
      variant = [variant];
    }
    variant.sort();

    var seenPseudoClass = false;
    var trace = [name];
    var variantMapping = mapping;
    for (var i = 0; i < variant.length; i++) {
      if (variant[i] === 'base' && variant.length > 1) {
        throw new Error('"base" should not be used as a part of a complex variant');
      }

      if (variant[i] !== 'base' && !seenPseudoClass) {
        variantMapping.then = variantMapping.then || {};
        variantMapping.then[variant[i]] = variantMapping.then[variant[i]] || {};
        variantMapping = variantMapping.then[variant[i]];
        trace.push(variant[i]);
      }

      if (i === variant.length - 1) {
        if (variant[i] === 'base') {
          style = _extends({ boxSizing: 'border-box' }, style);
        }
        var _className = trace.join('-') + '-' + id;
        css.push(compileStyle(_className, style));
        variantMapping.className = _className;
      }
    }
  }

  return { id: id, css: css.join('\n'), mapping: mapping };
}

function compileStyle(className, style) {
  var important = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var css = [];
  var cssList = [];
  var ownStyle = {};

  for (var _name in style) {
    var value = style[_name];
    if (!style.hasOwnProperty(_name)) {
      continue;
    }
    if (_PseudoClassSet2.default.hasOwnProperty(_name) && _PseudoClassSet2.default[_name]) {
      // this is pseudo class, recurse
      cssList.push(compileStyle(className + ':' + compileName(_name), value, important));
    } else if (!isEmpty(value)) {
      ownStyle[_name] = value;
    }
  }

  ownStyle = (0, _expand2.default)(ownStyle);
  ownStyle = (0, _inlineStylePrefixAll2.default)(ownStyle);

  for (var _name2 in ownStyle) {
    var _value = ownStyle[_name2];
    _name2 = compileName(_name2);
    if (Array.isArray(_value)) {
      for (var i = 0; i < _value.length; i++) {
        css.push(_name2 + ':' + _value[i] + (important ? ' !important' : ''));
      }
    } else {
      css.push(_name2 + ':' + _value + (important ? ' !important' : ''));
    }
  }

  if (css.length > 0) {
    return ['.' + className + ' { ' + css.join(';') + '; }'].concat(cssList).join('\n');
  } else {
    return cssList.join('\n');
  }
}

function isEmpty(value) {
  return value == null || value === '' || value === false;
}

/**
 * Compile style prop name.
 *
 * Based on code in React, see react/lib/CSSPropertyOperations module.
 */
function compileName(name) {
  return (0, _hyphenateStyleName2.default)(name);
}

var expandStyle = exports.expandStyle = _expand2.default;

exports.compileName = compileName = (0, _memoizeStringOnly2.default)(compileName); // eslint-disable-line
